name: Module Coverage

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      module:
        description: 'Module to analyze (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'flow'
          - 'weave'
          - 'register_mapper'

# Cancel ongoing runs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Determine which modules to analyze based on changed files
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-matrix.outputs.modules }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed modules
        id: detect
        uses: actions/github-script@v7
        with:
          script: |
            const modules = [];

            // For manual trigger with specific module
            if (context.payload.inputs && context.payload.inputs.module) {
              if (context.payload.inputs.module === '') {
                // Analyze all modules
                modules.push('flow', 'weave', 'register_mapper');
              } else {
                modules.push(context.payload.inputs.module);
              }
              core.setOutput('result', JSON.stringify(modules));
              return;
            }

            // For PRs, detect what changed
            if (context.eventName === 'pull_request') {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
              });

              const changedModules = new Set();
              for (const file of files) {
                if (file.filename.startsWith('flow/')) changedModules.add('flow');
                if (file.filename.startsWith('weave/')) changedModules.add('weave');
                if (file.filename.startsWith('register_mapper/')) changedModules.add('register_mapper');

                // If workflow files changed, analyze everything
                if (file.filename.startsWith('.github/workflows/')) {
                  modules.push('flow', 'weave', 'register_mapper');
                  core.setOutput('result', JSON.stringify(modules));
                  return;
                }
              }

              modules.push(...Array.from(changedModules));
              core.setOutput('result', JSON.stringify(modules));
              return;
            }

            // For push events to main/develop, analyze all
            modules.push('flow', 'weave', 'register_mapper');
            core.setOutput('result', JSON.stringify(modules));

      - name: Set matrix output
        id: set-matrix
        run: |
          echo "modules=${{ steps.detect.outputs.result }}" >> $GITHUB_OUTPUT
          echo "Modules to analyze: ${{ steps.detect.outputs.result }}"

  # Run coverage for detected modules
  coverage:
    needs: detect-modules
    if: needs.detect-modules.outputs.modules != '[]'
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.detect-modules.outputs.modules) }}
        include:
          - module: flow
            display-name: Flow
            threshold: 90
          - module: weave
            display-name: Weave
            threshold: 80
          - module: register_mapper
            display-name: Register Mapper
            threshold: 80

    uses: ./.github/workflows/reusable-coverage.yml
    with:
      module-name: ${{ matrix.module }}
      module-display-name: ${{ matrix.display-name }}
      coverage-threshold: ${{ matrix.threshold }}