name: SwiftIO Coverage

# Run coverage on PRs, pushes to main/develop, and can be triggered manually
on:
  pull_request:
    branches:
      - main
    paths:
      - 'flow/**'
      - '.github/workflows/coverage.yml'
      - '.github/actions/setup-zephyr-modules/**'
  push:
    branches:
      - main
      - develop
    paths:
      - 'flow/**'
      - '.github/workflows/coverage.yml'
      - '.github/actions/setup-zephyr-modules/**'
  workflow_dispatch:

# Cancel ongoing runs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# Grant permissions for the workflow
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  coverage:
    name: Generate Packet I/O Coverage Report
    runs-on: ubuntu-latest
    container:
      image: zephyrprojectrtos/ci:v0.26.18
      options: '--entrypoint /bin/bash'

    steps:
      # Need to checkout first to use local composite action
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Complete Zephyr Modules Environment
        uses: ./.github/actions/setup-zephyr-modules
        with:
          zephyr-version: 'v3.7.1'
          setup-python-env: 'true'  # This container needs Python setup
          install-coverage-tools: 'true'

      - name: Run Coverage Tests
        shell: bash
        run: |
          cd zephyr_io/..
          ./zephyr_io/scripts/generate_flow_coverage.sh

      - name: Generate coverage report
        shell: bash
        run: |
          cd twister-combined-coverage
          # Only analyze flow module source code (not tests, samples, or other modules)
          gcovr --filter=".*flow/subsys/flow/.*" \
                --xml coverage.xml \
                --html-details coverage.html \
                --print-summary .
          cd ..

          # Also generate text summary for PR comment (flow module only)
          gcovr --filter=".*flow/subsys/flow/.*" \
                --print-summary twister-combined-coverage > coverage-summary.txt

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          if-no-files-found: ignore
          path: |
            twister-combined-coverage/coverage.html
            twister-combined-coverage/coverage.xml
            coverage-summary.txt

      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('coverage-summary.txt', 'utf8');

            // Extract coverage percentages
            const lineMatch = summary.match(/lines:\s+([\d.]+)%/);
            const funcMatch = summary.match(/functions:\s+([\d.]+)%/);
            const branchMatch = summary.match(/branches:\s+([\d.]+)%/);

            const lineCov = lineMatch ? parseFloat(lineMatch[1]) : 0;
            const funcCov = funcMatch ? parseFloat(funcMatch[1]) : 0;
            const branchCov = branchMatch ? parseFloat(branchMatch[1]) : 0;

            // Choose emoji based on line coverage
            const emoji = lineCov >= 95 ? '🟢' : lineCov >= 90 ? '🟡' : '🔴';

            const comment = `## ${emoji} flow Module Coverage

            | Metric | Coverage |
            |--------|----------|
            | **Lines** | ${lineCov.toFixed(1)}% |
            | **Functions** | ${funcCov.toFixed(1)}% |
            | **Branches** | ${branchCov.toFixed(1)}% |

            > Coverage for \`flow/subsys/flow/\` only
            > Minimum threshold: 90%`;

            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('flow Module Coverage')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Coverage Status Check
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          # Extract coverage percentage for flow module only
          LINE_COV=$(gcovr --filter=".*flow/subsys/flow/.*" --print-summary twister-combined-coverage | grep "lines:" | sed 's/.*lines: \([0-9.]*\)%.*/\1/')

          # Set minimum coverage threshold for flow module
          MIN_COVERAGE=90

          # Compare coverage with threshold
          if (( $(echo "$LINE_COV < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage check failed for flow module: $LINE_COV% is below minimum threshold of $MIN_COVERAGE%"
            exit 1
          else
            echo "✅ Coverage check passed for flow module: $LINE_COV% meets minimum threshold of $MIN_COVERAGE%"
          fi